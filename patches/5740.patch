From c4d54ab3044391db627b094e1cf7c109a51c63d5 Mon Sep 17 00:00:00 2001
From: Even Rouault <even.rouault@spatialys.com>
Date: Tue, 17 May 2022 00:42:32 +0200
Subject: [PATCH 1/3] FlatGeoBuf: fix crash when calling CreateFeature() on a
 dataset opened in read-only mode (fixes #5739)

---
 autotest/ogr/ogr_flatgeobuf.py                |  5 ++++
 ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h   |  9 +++----
 .../flatgeobuf/ogrflatgeobufdataset.cpp       |  2 +-
 .../flatgeobuf/ogrflatgeobufeditablelayer.cpp | 26 ++++++++++++++++---
 .../flatgeobuf/ogrflatgeobuflayer.cpp         | 21 +++++++--------
 5 files changed, 42 insertions(+), 21 deletions(-)

diff --git a/autotest/ogr/ogr_flatgeobuf.py b/autotest/ogr/ogr_flatgeobuf.py
index 71e3eb489b34..3b72b4f826c3 100644
--- a/autotest/ogr/ogr_flatgeobuf.py
+++ b/autotest/ogr/ogr_flatgeobuf.py
@@ -754,6 +754,11 @@ def test_ogr_flatgeobuf_editing():
     f = lyr.GetNextFeature()
     assert f is None
 
+    f = ogr.Feature(lyr.GetLayerDefn())
+    f.SetGeometry(ogr.CreateGeometryFromWkt('POINT (1 1)'))
+    with gdaltest.error_handler():
+        assert lyr.CreateFeature(f) != ogr.OGRERR_NONE
+
     ogr.GetDriverByName('FlatGeobuf').DeleteDataSource('/vsimem/test.fgb')
     assert not gdal.VSIStatL('/vsimem/test.fgb')
 
diff --git a/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h b/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h
index 94a1d82f0758..693744ec1468 100644
--- a/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h
+++ b/ogr/ogrsf_frmts/flatgeobuf/ogr_flatgeobuf.h
@@ -96,11 +96,9 @@ class OGRFlatGeobufLayer final : public OGRLayer, public OGRFlatGeobufBaseLayerI
 
         // creation
         bool m_create = false;
-        bool m_update = false;
         std::vector<std::shared_ptr<FlatGeobuf::Item>> m_featureItems; // feature item description used to create spatial index
         bool m_bCreateSpatialIndexAtClose = true;
         bool m_bVerifyBuffers = true;
-        bool m_bCanCreate = true;
         VSILFILE *m_poFpWrite = nullptr;
         uint64_t m_writeOffset = 0; // current write offset
         uint64_t m_offsetAfterHeader = 0; // offset after dummy header writing (when creating a file without spatial index)
@@ -126,14 +124,14 @@ class OGRFlatGeobufLayer final : public OGRLayer, public OGRFlatGeobufBaseLayerI
         void writeHeader(VSILFILE *poFp, uint64_t featuresCount, std::vector<double> *extentVector);
 
         // construction
-        OGRFlatGeobufLayer(const FlatGeobuf::Header *, GByte *headerBuf, const char *pszFilename, VSILFILE *poFp, uint64_t offset, bool update);
+        OGRFlatGeobufLayer(const FlatGeobuf::Header *, GByte *headerBuf, const char *pszFilename, VSILFILE *poFp, uint64_t offset);
         OGRFlatGeobufLayer(const char *pszLayerName, const char *pszFilename, OGRSpatialReference *poSpatialRef, OGRwkbGeometryType eGType, bool bCreateSpatialIndexAtClose, VSILFILE *poFpWrite, std::string &osTempFile);
 
     public:
         virtual ~OGRFlatGeobufLayer();
 
-        static OGRFlatGeobufLayer *Open(const FlatGeobuf::Header *, GByte *headerBuf, const char *pszFilename, VSILFILE *poFp, uint64_t offset, bool update);
-        static OGRFlatGeobufLayer *Open(const char* pszFilename, VSILFILE *fp, bool bVerifyBuffers, bool update);
+        static OGRFlatGeobufLayer *Open(const FlatGeobuf::Header *, GByte *headerBuf, const char *pszFilename, VSILFILE *poFp, uint64_t offset);
+        static OGRFlatGeobufLayer *Open(const char* pszFilename, VSILFILE *fp, bool bVerifyBuffers);
         static OGRFlatGeobufLayer *Create(const char *pszLayerName, const char *pszFilename, OGRSpatialReference *poSpatialRef, OGRwkbGeometryType eGType, bool bCreateSpatialIndexAtClose, char **papszOptions);
 
         virtual OGRFeature *GetFeature(GIntBig nFeatureId) override;
@@ -173,6 +171,7 @@ class OGRFlatGeobufEditableLayer final: public OGREditableLayer, public OGRFlatG
             return static_cast<OGRFlatGeobufLayer *>(m_poDecoratedLayer)->GetFilename();
         }
         OGRLayer* GetLayer() override { return this; }
+        int TestCapability( const char * pszCap ) override;
 };
 
 class OGRFlatGeobufDataset final: public GDALDataset
diff --git a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp
index 345ae6699ae3..a7e76daa5133 100644
--- a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp
+++ b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp
@@ -252,7 +252,7 @@ bool OGRFlatGeobufDataset::OpenFile(const char* pszFilename, VSILFILE* fp, bool
 {
     CPLDebugOnly("FlatGeobuf", "Opening OGRFlatGeobufLayer");
     auto poLayer = std::unique_ptr<OGRFlatGeobufLayer>(
-        OGRFlatGeobufLayer::Open(pszFilename, fp, bVerifyBuffers, m_bUpdate));
+        OGRFlatGeobufLayer::Open(pszFilename, fp, bVerifyBuffers));
     if( !poLayer )
         return false;
 
diff --git a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp
index db1c618ed243..200f70771b61 100644
--- a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp
+++ b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp
@@ -86,7 +86,7 @@ OGRErr OGRFlatGeobufEditableLayerSynchronizer::EditableSyncToDisk(
 
     OGRFlatGeobufLayer *poFlatGeobufTmpLayer = OGRFlatGeobufLayer::Create(
         osLayerName.c_str(), osTmpFilename.c_str(), spatialRef, gType, createIndex, m_papszOpenOptions);
-  
+
     OGRErr eErr = OGRERR_NONE;
     OGRFeatureDefn *poEditableFDefn = poEditableLayer->GetLayerDefn();
     for (int i = 0; eErr == OGRERR_NONE && i < poEditableFDefn->GetFieldCount();
@@ -163,7 +163,7 @@ OGRErr OGRFlatGeobufEditableLayerSynchronizer::EditableSyncToDisk(
         return OGRERR_FAILURE;
     }
 
-    m_poFlatGeobufLayer = OGRFlatGeobufLayer::Open(osFilename.c_str(), fp, false, false);
+    m_poFlatGeobufLayer = OGRFlatGeobufLayer::Open(osFilename.c_str(), fp, false);
     *ppoDecoratedLayer = m_poFlatGeobufLayer;
 
     return OGRERR_NONE;
@@ -190,4 +190,24 @@ GIntBig OGRFlatGeobufEditableLayer::GetFeatureCount( int bForce )
             SetNextFID(nTotalFeatureCount + 1);
     }
     return nRet;
-}
\ No newline at end of file
+}
+
+/************************************************************************/
+/*                            TestCapability()                          */
+/************************************************************************/
+
+int OGRFlatGeobufEditableLayer::TestCapability( const char * pszCap )
+{
+    if( EQUAL(pszCap, OLCSequentialWrite) ||
+        EQUAL(pszCap, OLCRandomWrite) ||
+        EQUAL(pszCap, OLCCreateField) ||
+        EQUAL(pszCap, OLCDeleteField) ||
+        EQUAL(pszCap, OLCReorderFields) ||
+        EQUAL(pszCap, OLCAlterFieldDefn) ||
+        EQUAL(pszCap, OLCDeleteFeature) )
+    {
+        return TRUE;
+    }
+
+    return OGREditableLayer::TestCapability(pszCap);
+}
diff --git a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
index 2ba9ebba8c42..44951d986f35 100644
--- a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
+++ b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
@@ -61,8 +61,7 @@ OGRFlatGeobufLayer::OGRFlatGeobufLayer(
     GByte *headerBuf,
     const char *pszFilename,
     VSILFILE *poFp,
-    uint64_t offset,
-    bool update)
+    uint64_t offset)
 {
     m_poHeader = poHeader;
     CPLAssert(poHeader);
@@ -74,7 +73,6 @@ OGRFlatGeobufLayer::OGRFlatGeobufLayer(
     m_offsetFeatures = offset;
     m_offset = offset;
     m_create = false;
-    m_update = update;
 
     m_featuresCount = m_poHeader->features_count();
     m_geometryType = m_poHeader->geometry_type();
@@ -1169,8 +1167,8 @@ OGRErr OGRFlatGeobufLayer::CreateField(OGRFieldDefn *poField, int /* bApproxOK *
 
 OGRErr OGRFlatGeobufLayer::ICreateFeature(OGRFeature *poNewFeature)
 {
-    if (!m_bCanCreate) {
-        CPLError(CE_Failure, CPLE_AppDefined, "Source not valid for direct conversion");
+    if (!m_create) {
+        CPLError(CE_Failure, CPLE_AppDefined, "CreateFeature() not supported on read-only layer");
         return OGRERR_FAILURE;
     }
 
@@ -1412,9 +1410,9 @@ OGRErr OGRFlatGeobufLayer::GetExtent(OGREnvelope* psExtent, int bForce)
 int OGRFlatGeobufLayer::TestCapability(const char *pszCap)
 {
     if (EQUAL(pszCap, OLCCreateField))
-        return m_create || m_update;
+        return m_create;
     else if (EQUAL(pszCap, OLCSequentialWrite))
-        return m_create || m_update;
+        return m_create;
     else if (EQUAL(pszCap, OLCRandomRead))
         return m_poHeader != nullptr && m_poHeader->index_node_size() > 0;
     else if (EQUAL(pszCap, OLCIgnoreFields))
@@ -1510,14 +1508,13 @@ OGRFlatGeobufLayer *OGRFlatGeobufLayer::Open(
     GByte *headerBuf,
     const char *pszFilename,
     VSILFILE *poFp,
-    uint64_t offset,
-    bool update)
+    uint64_t offset)
 {
-    OGRFlatGeobufLayer *layer = new OGRFlatGeobufLayer(poHeader, headerBuf, pszFilename, poFp, offset, update);
+    OGRFlatGeobufLayer *layer = new OGRFlatGeobufLayer(poHeader, headerBuf, pszFilename, poFp, offset);
     return layer;
 }
 
-OGRFlatGeobufLayer *OGRFlatGeobufLayer::Open(const char* pszFilename, VSILFILE* fp, bool bVerifyBuffers, bool update)
+OGRFlatGeobufLayer *OGRFlatGeobufLayer::Open(const char* pszFilename, VSILFILE* fp, bool bVerifyBuffers)
 {
     uint64_t offset = sizeof(magicbytes);
     CPLDebugOnly("FlatGeobuf", "Start at offset: %lu", static_cast<long unsigned int>(offset));
@@ -1582,7 +1579,7 @@ OGRFlatGeobufLayer *OGRFlatGeobufLayer::Open(const char* pszFilename, VSILFILE*
     CPLDebugOnly("FlatGeobuf", "Features start at offset (%lu)", static_cast<long unsigned int>(offset));
 
     CPLDebugOnly("FlatGeobuf", "Opening OGRFlatGeobufLayer");
-    auto poLayer = OGRFlatGeobufLayer::Open(header, buf.release(), pszFilename, fp, offset, update);
+    auto poLayer = OGRFlatGeobufLayer::Open(header, buf.release(), pszFilename, fp, offset);
     poLayer->VerifyBuffers(bVerifyBuffers);
 
     return poLayer;

From 853bf1f1e65390afc93a9fb82370d209e40f2401 Mon Sep 17 00:00:00 2001
From: Even Rouault <even.rouault@spatialys.com>
Date: Tue, 17 May 2022 02:26:01 +0200
Subject: [PATCH 2/3] ogr_flatgeobuf.py: test appending a feature to a layer in
 update mode (refs #5739)

---
 autotest/ogr/ogr_flatgeobuf.py | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/autotest/ogr/ogr_flatgeobuf.py b/autotest/ogr/ogr_flatgeobuf.py
index 3b72b4f826c3..3a1fb04f0503 100644
--- a/autotest/ogr/ogr_flatgeobuf.py
+++ b/autotest/ogr/ogr_flatgeobuf.py
@@ -726,6 +726,10 @@ def test_ogr_flatgeobuf_editing():
     ds = ogr.Open('/vsimem/test.fgb', update=1)
     lyr = ds.GetLayer(0)
 
+    f = ogr.Feature(lyr.GetLayerDefn())
+    f.SetGeometry(ogr.CreateGeometryFromWkt('POINT (1 1)'))
+    assert lyr.CreateFeature(f) == ogr.OGRERR_NONE
+
     assert lyr.TestCapability(ogr.OLCDeleteFeature) == 1
     assert lyr.DeleteFeature(1) == 0
     assert lyr.DeleteFeature(1) == ogr.OGRERR_NON_EXISTING_FEATURE
@@ -743,7 +747,7 @@ def test_ogr_flatgeobuf_editing():
     lyr = ds.GetLayer(0)
 
     c = lyr.GetFeatureCount()
-    assert c == 1
+    assert c == 2
 
     f = lyr.GetNextFeature()
     assert f is not None
@@ -751,6 +755,10 @@ def test_ogr_flatgeobuf_editing():
     assert f[0] == 2
     assert f.GetFieldCount() == 1
 
+    f = lyr.GetNextFeature()
+    assert f is not None
+    assert f.GetGeometryRef().ExportToWkt() == 'POINT (1 1)'
+
     f = lyr.GetNextFeature()
     assert f is None
 

From be33dc2fba1788b0df50664c283f559ad6fd4c56 Mon Sep 17 00:00:00 2001
From: Even Rouault <even.rouault@spatialys.com>
Date: Tue, 17 May 2022 02:28:05 +0200
Subject: [PATCH 3/3] FlatGeoBuf: make CreateLayer() to fail if output file
 cannot be created

---
 autotest/ogr/ogr_flatgeobuf.py                        | 11 +++++++++++
 ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp   |  2 ++
 .../flatgeobuf/ogrflatgeobufeditablelayer.cpp         |  2 ++
 ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp     |  2 ++
 4 files changed, 17 insertions(+)

diff --git a/autotest/ogr/ogr_flatgeobuf.py b/autotest/ogr/ogr_flatgeobuf.py
index 3a1fb04f0503..c49c8c67747b 100644
--- a/autotest/ogr/ogr_flatgeobuf.py
+++ b/autotest/ogr/ogr_flatgeobuf.py
@@ -901,3 +901,14 @@ def test_ogr_flatgeobuf_coordinate_epoch_custom_wkt():
     ds = None
 
     ogr.GetDriverByName('FlatGeobuf').DeleteDataSource(filename)
+
+
+###############################################################################
+
+
+def test_ogr_flatgeobuf_invalid_output_filename():
+
+    ds = ogr.GetDriverByName('FlatGeobuf').CreateDataSource("/i_do/not_exist/my.fgb")
+    with gdaltest.error_handler():
+        assert ds.CreateLayer('foo') is None
+
diff --git a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp
index a7e76daa5133..db5d4d3e50ec 100644
--- a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp
+++ b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufdataset.cpp
@@ -388,6 +388,8 @@ OGRLayer* OGRFlatGeobufDataset::ICreateLayer( const char *pszLayerName,
 
     auto poLayer = std::unique_ptr<OGRFlatGeobufLayer>(
         OGRFlatGeobufLayer::Create(pszLayerName, osFilename, poSpatialRef, eGType, bCreateSpatialIndexAtClose, papszOptions));
+    if( poLayer == nullptr )
+        return nullptr;
 
     m_apoLayers.push_back(std::move(poLayer));
 
diff --git a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp
index 200f70771b61..c69d4b16b4de 100644
--- a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp
+++ b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobufeditablelayer.cpp
@@ -86,6 +86,8 @@ OGRErr OGRFlatGeobufEditableLayerSynchronizer::EditableSyncToDisk(
 
     OGRFlatGeobufLayer *poFlatGeobufTmpLayer = OGRFlatGeobufLayer::Create(
         osLayerName.c_str(), osTmpFilename.c_str(), spatialRef, gType, createIndex, m_papszOpenOptions);
+    if( poFlatGeobufTmpLayer == nullptr )
+        return OGRERR_FAILURE;
 
     OGRErr eErr = OGRERR_NONE;
     OGRFeatureDefn *poEditableFDefn = poEditableLayer->GetLayerDefn();
diff --git a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
index 44951d986f35..86b26c0a27da 100644
--- a/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
+++ b/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp
@@ -1499,6 +1499,8 @@ OGRFlatGeobufLayer *OGRFlatGeobufLayer::Create(
 {
     std::string osTempFile = GetTempFilePath(pszFilename, papszOptions);
     VSILFILE *poFpWrite = CreateOutputFile(pszFilename, papszOptions, bCreateSpatialIndexAtClose);
+    if( poFpWrite == nullptr )
+        return nullptr;
     OGRFlatGeobufLayer *layer = new OGRFlatGeobufLayer(pszLayerName, pszFilename, poSpatialRef, eGType, bCreateSpatialIndexAtClose, poFpWrite, osTempFile);
     return layer;
 }
