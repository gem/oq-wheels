---
name: Linux wheels x86_64
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "tmate debugging enabled"
        required: false
        default: false

env:
  WHEEL_SDIR: wheelhouse

jobs:
  build_psutil:
    name: psutil ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-24.04"]
        python: ["3.12"]
        platform: ["x86_64"]
        os-name: ["jammy"]
    env:
      REPO_DIR: psutil
      BUILD_COMMIT: release-6.0.0
      WHEEL_SDIR: wheelhouse
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "_2_28"
      BUILD_DEPENDS: "cython wheel setuptools"
      TEST_DEPENDS: "cython"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: get code of psutil
        run: |
          echo $PATH
          bash -x .github/workflows/build.sh
      - name: Build Wheel of psutil
        run: |
          sudo apt install python3-virtualenv
      - name: Build Wheel of psutil
        run: |
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse

  build_pyproj:
    name: pyproj ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-24.04"]
        python: ["3.12"]
        platform: ["x86_64"]
        os-name: ["jammy"]
    env:
      REPO_DIR: pyproj
      BUILD_COMMIT: 3.6.1
      WHEEL_SDIR: wheelhouse
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "_2_28"
      BUILD_DEPENDS: "cython wheel setuptools"
      TEST_DEPENDS: "cython"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: get code of pyproj
        run: |
          echo $PATH
          bash -x .github/workflows/build.sh
      - name: Build Wheel of pyproj
        run: |
          sudo apt install python3-virtualenv
      - name: Build Wheel of pyproj
        run: |
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse

  build_Fiona:
    name: Fiona ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-24.04"]
        python: ["3.12"]
        platform: ["x86_64"]
        os-name: ["jammy"]
    env:
      REPO_DIR: Fiona
      BUILD_COMMIT: 1.9.5
      GDAL_FIONA: 3.7.3
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "_2_28"
      BUILD_DEPENDS: "oldest-supported-numpy cython wheel numpy==2.2.5 setuptools"
      TEST_DEPENDS: "oldest-supported-numpy attrs pytest click mock boto3 packaging hypothesis wheel pytz numpy==2.2.5 setuptools"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: get code of Fiona
        run: |
          echo $PATH
          bash -x .github/workflows/build.sh
      - name: Build Wheel of Fiona
        env:
          BUILD_DEPENDS: "oldest-supported-numpy cython==0.29.26 wheel==0.34.2 numpy==2.2.5 setuptools"
          TEST_DEPENDS: "oldest-supported-numpy attrs==21.4.0 pytest==6.2.5 click==8.0.3 mock boto3 packaging hypothesis==4.38.1 wheel==0.34.2 pytz numpy==2.2.5 setuptools"
        run: |
          echo $PATH
          sudo apt install python3-virtualenv
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse

  build_GDAL:
    name: GDAL ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-24.04"]
        python: ["3.12"]
        platform: ["x86_64"]
        os-name: ["jammy"]
    env:
      REPO_DIR: gdal
      BUILD_COMMIT: v3.7.3
      WHEEL_SDIR: wheelhouse
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "_2_28"
      BUILD_DEPENDS: "wheel numpy==2.2.5 setuptools"
      TEST_DEPENDS: "numpy==2.2.5 setuptools"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: get code of GDAL
        run: |
          bash -x .github/workflows/build.sh
      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 90
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      - name: Build Wheel of GDAL
        run: |
          sudo apt install python3-virtualenv
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse

  test_wheel:
    needs: [build_GDAL, build_pyproj, build_Fiona]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ["3.12"]
    env:
      BRANCH_TEST: ae-py312
      PYTHON_VERSION: "${{ matrix.python-version }}"
    steps:
      - name: Set up Python  ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: download artifact
        uses: actions/download-artifact@v3
        id: download
        with:
          name: wheels
          path: wheelhouse
      - name: "Echo artifact download path"
        run: echo ${{steps.download.outputs.download-path}}
      - name: Test wheels with python ${{ matrix.python-version }}
        shell: bash
        run: |
          set -x
          echo "engine installation to test wheel"
          python3 -m venv $HOME/openquake
          source $HOME/openquake/bin/activate
          pip install -U pip wheel setuptools
          #pip install -r https://raw.githubusercontent.com/gem/oq-engine/master/requirements-py311-linux64.txt
          cd ${{steps.download.outputs.download-path}}
          PYCUT=`echo "${PYTHON_VERSION//.}"`
          ls *${PYCUT}*
          pip install --force-reinstall *${PYCUT}*
          cd $HOME
          git clone -b ${BRANCH_TEST} https://github.com/gem/oq-engine.git
          cd oq-engine
          git status
          pip install -r requirements-py312-linux64.txt
          pip install -e .
          cd $HOME/oq-engine
          oq engine --upgrade-db
          sleep 5
          pip install pytest
          sleep 3
          pytest -vsx --color=yes openquake/sep/tests/test_utils.py
          pytest -vsx --color=yes openquake/sep
          pytest -vsx --color=yes openquake/calculators
          oq engine --run https://downloads.openquake.org/jobs/risk_test.zip
          pytest -vsx --color=yes openquake/hazardlib/tests/gsim/kotha_2020_test.py
