---
name: MacOS wheels ARM64
on:
  workflow_dispatch:
  pull_request:
env:
  WHEEL_SDIR: wheelhouse
jobs:
  build_psutil:
    name: psutil ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [m1]
        python: ["3.10", "3.11", "3.12"]
        platform: ["arm64"]
        macos-target: ["13"]
        os-name: ["osx"]
    env:
      REPO_DIR: psutil
      BUILD_COMMIT: release-7.0.0
      WHEEL_SDIR: wheelhouse
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "2014"
      BUILD_DEPENDS: "cython wheel setuptools"
      TEST_DEPENDS: "cython"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
      - name: get code of psutil
        run: |
          echo $PATH
          bash -x .github/workflows/build.sh
      - name: Build Wheel of psutil
        run: |
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: "wheels_psutil_${{ matrix.python }}"
          path: wheelhouse

  build_pyproj:
    name: pyproj ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [m1]
        python: ["3.10", "3.11", "3.12"]
        platform: ["arm64"]
        macos-target: ["13"]
        os-name: ["osx"]
    env:
      REPO_DIR: pyproj
      BUILD_COMMIT: 3.6.1
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "2014"
      BUILD_DEPENDS: "cython wheel setuptools numpy==2.2.6"
      TEST_DEPENDS: "cython numpy==2.2.6"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup cmake
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          brew install cmake
          echo "check python3"
          python3 -c "import sys; print(sys.version)"
      - name: Get code of pyproj
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          bash -x .github/workflows/build.sh
      - name: Build Wheel of pyproj
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: "wheels_pyproj_${{ matrix.python }}"
          path: wheelhouse

  build_Fiona:
    name: Fiona ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [m1]
        python: ["3.10", "3.11", "3.12"]
        platform: ["arm64"]
        macos-target: ["13"]
        os-name: ["osx"]
    env:
      REPO_DIR: Fiona
      BUILD_COMMIT: 1.10.1
      GDAL_FIONA: 3.9.2
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "2014"
      BUILD_DEPENDS: "oldest-supported-numpy cython wheel numpy==2.2.6 setuptools"
      TEST_DEPENDS: "oldest-supported-numpy attrs pytest click mock boto3 packaging hypothesis wheel pytz numpy==2.2.6 setuptools matplotlib pyparsing fsspec gcsfs"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup cmake
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          brew install cmake
          echo "check python3"
          python3 -c "import sys; print(sys.version)"
      - name: Get code of Fiona
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          bash -x .github/workflows/build.sh
      - name: Build Wheel of Fiona
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: "wheels_fiona_${{ matrix.python }}"
          path: wheelhouse

  build_GDAL:
    name: GDAL ${{ matrix.python }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [m1]
        python: ["3.10", "3.11", "3.12"]
        platform: ["arm64"]
        macos-target: ["13"]
        os-name: ["osx"]
    env:
      REPO_DIR: gdal
      BUILD_COMMIT: v3.9.2
      WHEEL_SDIR: wheelhouse
      PLAT: "${{ matrix.platform }}"
      MB_PYTHON_VERSION: "${{ matrix.python }}"
      MB_ML_VER: "2014"
      BUILD_DEPENDS: "numpy==2.2.6 setuptools wheel"
      TRAVIS_OS_NAME: ${{ matrix.os-name }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup cmake
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          brew install cmake
          echo "check python3"
          python3 -c "import sys; print(sys.version)"
      - name: Get code of gdal
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          bash -x .github/workflows/build.sh
      - name: Build Wheel of GDAL
        run: |
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          echo $PATH
          bash -x .github/workflows/wheel.sh
      - uses: actions/upload-artifact@v4
        with:
          name: "wheels_gdal_${{ matrix.python }}"
          path: wheelhouse

  test_wheel:
    needs: [build_GDAL, build_pyproj, build_Fiona]
    name: test ${{ matrix.python-version }} ${{ matrix.os-name }} ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [m1]
        python-version: ["3.10", "3.11", "3.12"]
        platform: ["arm64"]
        macos-target: ["13"]
        os-name: ["osx"]
    env:
      BRANCH_TEST: ae_numpy2
      PYTHON_VERSION: "${{ matrix.python-version }}"

    steps:
      - name: Set up Python  ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: download artifact
        uses: actions/download-artifact@v4
        id: download
        with:
          path: wheelhouse
      - name: "Echo artifact download path"
        run: echo ${{steps.download.outputs.download-path}}
      - name: Test wheels with python ${{ matrix.python-version }}
        shell: bash
        run: |
          set -x
          echo "engine installation to test wheel"
          python3 -m venv $HOME/openquake
          source $HOME/openquake/bin/activate
          pip install -U pip wheel setuptools
          cd ${{steps.download.outputs.download-path}}
          PYCUT=`echo "${PYTHON_VERSION//.}"`
          cd $HOME
          git clone -b ${BRANCH_TEST} https://github.com/gem/oq-engine.git
          cd oq-engine
          git status
          pip install -r requirements-py"${PYCUT}"-macos_arm64.txt
          cd $HOME
          find . -name \*cp"${PYCUT}"\* -type f -print0 | xargs -0 pip install --force-reinstall
          pip install -e oq-engine/
          cd $HOME/oq-engine
          oq engine --upgrade-db
          sleep 5
          pytest -vsx --color=yes openquake/sep/tests/test_utils.py
          pytest -vsx --color=yes openquake/sep
          pytest -vsx --color=yes openquake/hazardlib/tests/gsim/kotha_2020_test.py
          oq engine --run https://downloads.openquake.org/jobs/risk_test.zip
